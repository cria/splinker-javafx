name: Compilar e Lançar spLinker para Windows e Linux

on:
  push:
    branches:
      - master

jobs:
  build-on-windows:
    name: "Compilação para Windows"
    runs-on: windows-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Configurar Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          architecture: x64

      - name: Define versão
        shell: pwsh
        run: |
          $version = Select-String -Path "pom.xml" -Pattern '<version>(.*?)</version>' | Select-Object -First 1
          $matches = [regex]::Match($version.ToString(), "<version>(.*?)</version>")
          $env:VERSION = $matches.Groups[1].Value
          "VERSION=$($env:VERSION)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Define nome do JAR
        shell: pwsh
        run: |
          "SPLINKER_FILE=splinker-$env:VERSION.jar" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Exibe nome do JAR
        shell: pwsh
        run: echo $env:SPLINKER_FILE

      - name: Maven - Instalar bibliotecas, compilar, executar testes automatizados e empacotar
        run: mvn package -DskipTests

      - name: Criar image jpackage
        run: jpackage --type app-image --name spLinker --input target/ --main-jar $env:SPLINKER_FILE --icon .\src\main\resources\images\splinker.ico

      - name: Copiar arquivo de configuração do Log4J/Sentry
        run: cp .\src\main\resources\log4j2.xml .\spLinker\

      - name: Empacotar para Windows (MSI)
        shell: pwsh
        run: |
          jpackage `
            --name spLinker `
            --app-image spLinker `
            --type msi `
            --dest dist\windows `
            --app-version $env:VERSION `
            --win-upgrade-uuid "e7f6cb61-254e-4e94-9184-0eaad5cb3e3b" `
            --win-shortcut `
            --win-dir-chooser `
            --win-per-user-install `
            --resource-dir .\src\main\resources\windows

      - name: Renomear MSI com versão
        shell: pwsh
        run: Rename-Item -Path "dist\windows\spLinker-*.msi" -NewName "spLinker-$env:VERSION.msi"

      # =========================
      # EXE LEGADO com NSIS (per-user) + JRE 8 — Win7/8/10/11
      # =========================

      - name: Definir URL fixa do JRE 8
        shell: pwsh
        run: |
          # Zulu 8 JRE x64 (compatível com Windows 7 e sem dependência de UCRT)
          "LEGACY_JRE_URL=https://cdn.azul.com/zulu/bin/zulu8.74.0.17-ca-jre8.0.392-win_x64.zip" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Instalar NSIS
        shell: pwsh
        run: choco install -y nsis

      - name: Preparar payload legado
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist\legacy\app | Out-Null
          New-Item -ItemType Directory -Force -Path dist\legacy\jre | Out-Null
          Copy-Item "target\$env:SPLINKER_FILE" "dist\legacy\app\" -Force
          Copy-Item ".\src\main\resources\log4j2.xml" "dist\legacy\" -Force
          Copy-Item ".\src\main\resources\images\splinker.ico" "dist\legacy\app\splinker.ico" -Force

      - name: Baixar e extrair JRE 8
        shell: pwsh
        run: |
          Invoke-WebRequest "$env:LEGACY_JRE_URL" -OutFile dist\legacy\jre.zip
          Expand-Archive -Path 'dist\legacy\jre.zip' -DestinationPath 'dist\legacy\unzipped' -Force
          $root = Get-ChildItem 'dist\legacy\unzipped' -Directory | Select-Object -First 1
          if (-not $root) { throw "Nao foi encontrada pasta apos extracao do JRE." }
          Copy-Item -Path (Join-Path $root.FullName '*') -Destination 'dist\legacy\jre' -Recurse -Force

      - name: Criar launcher VBS (sem console)
        shell: pwsh
        run: |
          $vbs = @'
          ' run-spLinker.vbs - inicia o app com JRE embutido, janela oculta
          Dim fso, folder, cmd
          Set fso = CreateObject("Scripting.FileSystemObject")
          folder = fso.GetParentFolderName(WScript.ScriptFullName)
          cmd = """" & folder & "\jre\bin\java.exe"" -jar """ & folder & "\app\$env:SPLINKER_FILE"""
          CreateObject("WScript.Shell").Run cmd, 0, False
          '@
          $vbs | Out-File -FilePath dist\legacy\run-spLinker.vbs -Encoding ASCII

      - name: Verificar payload legado
        shell: pwsh
        run: |
          if (-not (Test-Path "dist\legacy\app\$env:SPLINKER_FILE")) { throw "JAR nao encontrado." }
          if (-not (Test-Path "dist\legacy\jre\bin\java.exe")) { throw "JRE 8 nao encontrado." }
          Get-ChildItem -Recurse dist\legacy | Select-Object FullName, Length

      - name: Gerar script NSIS (per-user, sem registro/Start Menu)
        shell: pwsh
        run: |
          $ws    = (Get-Location).Path
          $appDir= Join-Path $ws 'dist\legacy\app'
          $jreDir= Join-Path $ws 'dist\legacy\jre'
          $vbs   = Join-Path $ws 'dist\legacy\run-spLinker.vbs'
          $log4j = Join-Path $ws 'dist\legacy\log4j2.xml'
          $out   = Join-Path $ws 'dist\windows'

          $nsi = @"
          !define APPNAME "spLinker"
          !define APPVER  "$($env:VERSION)"

          Name "${APPNAME}"
          OutFile "$out\spLinker-${APPVER}-legacy.exe"
          ; Instala por usuario, sem admin:
          InstallDir "$LOCALAPPDATA\${APPNAME}"
          RequestExecutionLevel user

          SetCompress auto
          SetCompressor /SOLID lzma

          !include "MUI2.nsh"
          !define MUI_ABORTWARNING
          !insertmacro MUI_PAGE_WELCOME
          !insertmacro MUI_PAGE_DIRECTORY
          !insertmacro MUI_PAGE_INSTFILES
          !insertmacro MUI_PAGE_FINISH
          !insertmacro MUI_LANGUAGE "English"

          Section "Install"
            SetOutPath "$INSTDIR"
            ; Copia payload (caminhos absolutos)
            File /r "$appDir\*.*"
            File /r "$jreDir\*.*"
            File "$vbs"
            File "$log4j"

            ; Atalho na area de trabalho (se existir)
            IfFileExists "$DESKTOP\." 0 +2
              CreateShortCut "$DESKTOP\${APPNAME}.lnk" "$INSTDIR\run-spLinker.vbs" "" "$INSTDIR\app\splinker.ico" 0

            ; Uninstaller no proprio diretorio (sem registro)
            WriteUninstaller "$INSTDIR\Uninstall.exe"
          SectionEnd

          Section "Uninstall"
            IfFileExists "$DESKTOP\${APPNAME}.lnk" 0 +1
              Delete "$DESKTOP\${APPNAME}.lnk"
            RMDir /r "$INSTDIR"
          SectionEnd
          "@

          # ASCII para evitar problemas de charset no makensis
          $nsi | Out-File -FilePath dist\legacy\setup.nsi -Encoding ASCII

      - name: Compilar instalador EXE legado (NSIS)
        shell: pwsh
        run: |
          & "C:\Program Files (x86)\NSIS\makensis.exe" "dist\legacy\setup.nsi"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: splinker-windows
          path: dist/windows
          retention-days: 3

  build-on-linux:
    name: "Compilação para Linux (.deb e .rpm)"
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Configurar Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          architecture: x64

      - name: Define nome do JAR
        run: echo "SPLINKER_FILE="splinker-$(grep -oPm1 "(?<=<version>)[^<]+" pom.xml | awk 'NR==1{print $1; exit}')".jar" >> $GITHUB_ENV

      - name: Maven - Instalar bibliotecas, compilar, executar testes automatizados e empacotar
        run: mvn package -DskipTests

      - name: Criar image jpackage
        run: jpackage --type app-image --name spLinker --input target/ --main-jar ${{ env.SPLINKER_FILE }}

      - name: Copiar arquivo de configuração do Log4J/Sentry
        run: cp ./src/main/resources/log4j2.xml ./spLinker

      - name: Empacotar para Deb
        run: jpackage --name spLinker --type deb --dest dist/linux/deb --linux-shortcut --app-image spLinker

      - name: Instalar empacotador RPM
        run: sudo apt-get install fakeroot

      - name: Empacotar para RPM
        run: jpackage --name spLinker --type rpm --dest dist/linux/rpm --linux-shortcut --app-image spLinker

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: splinker-linux
          path: dist/linux

  build-jar:
    name: "Gerar JAR executavel"
    runs-on: macos-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Configurar Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          architecture: x64

      - name: Compilar o projeto
        run: mvn clean package -DskipTests

      - name: Obter versão do projeto e mover o JAR
        run: |
          VERSION=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
          mkdir -p dist/jar
          mv target/splinker-$VERSION.jar dist/jar/splinker-$VERSION.jar
          echo "SPLINKER_FILE=splinker-$VERSION.jar" >> $GITHUB_ENV
          echo "SPLINKER_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload do JAR
        uses: actions/upload-artifact@v4
        with:
          name: splinker-jar
          path: dist/jar

  version-release:
    name: "Lançar nova versão"
    needs: [build-on-windows, build-on-linux, build-jar]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout de código
        uses: actions/checkout@v4

      - name: Download de artefatos Linux
        uses: actions/download-artifact@v4
        with:
          name: splinker-linux
          path: dist/linux

      - name: Download de artefatos Windows
        uses: actions/download-artifact@v4
        with:
          name: splinker-windows
          path: ./dist/windows

      - name: Define versão
        id: version
        run: echo "SPLINKER_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" pom.xml | awk 'NR==1{print $1; exit}')" >> $GITHUB_ENV

      - name: Criar Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.SPLINKER_VERSION }}
          release_name: Release v${{ env.SPLINKER_VERSION }}
          body: "Release created automatically by GitHub Actions."
          draft: false
          prerelease: false

      - name: Upload Linux .rpm Artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/linux/rpm/splinker-1.0-1.x86_64.rpm
          asset_name: spLinker-${{ env.SPLINKER_VERSION }}.rpm
          asset_content_type: application/x-rpm

      - name: Upload Linux .deb Artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/linux/deb/splinker_1.0_amd64.deb
          asset_name: spLinker-${{ env.SPLINKER_VERSION }}.deb
          asset_content_type: application/x-deb

      - name: Upload Windows MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/windows/spLinker-${{ env.SPLINKER_VERSION }}.msi
          asset_name: spLinker-${{ env.SPLINKER_VERSION }}.msi
          asset_content_type: application/x-msdownload

      - name: Upload Windows EXE legado
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/windows/spLinker-${{ env.SPLINKER_VERSION }}-legacy.exe
          asset_name: spLinker-${{ env.SPLINKER_VERSION }}-legacy.exe
          asset_content_type: application/x-msdownload
